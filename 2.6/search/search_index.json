{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#carlisle","title":"CARLISLE","text":"<p>Cut And Run anaLysIS pipeLinE</p> <p> </p> <p>This snakemake pipeline is built to run on Biowulf.</p> <p>For comments/suggestions/advice please contact CCBR_Pipeliner@mail.nih.gov.</p> <p>For detailed documentation on running the pipeline view the documentation website.</p>"},{"location":"#workflow","title":"Workflow","text":"<p>The CARLISLE pipeline was developed in support of NIH Dr Vassiliki Saloura's Laboratory and Dr Javed Khan's Laboratory. It has been developed and tested solely on NIH HPC Biowulf.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#carlisle-260","title":"CARLISLE 2.6.0","text":""},{"location":"changelog/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Bug fixes for DESeq (#127, @epehrsson)</li> <li>Removes single-sample group check for DESeq.</li> <li>Increases memory for DESeq.</li> <li>Ensures control replicate number is an integer.</li> <li>Fixes FDR cutoff misassigned to log2FC cutoff.</li> <li>Fixes <code>no_dedup</code> variable names in library normalization scripts.</li> <li>Fig bug that added nonexistent directories to the singularity bind paths. (#135, @kelly-sovacool)</li> <li>Containerize rules that require R (<code>deseq</code>, <code>go_enrichment</code>, and <code>spikein_assessment</code>) to fix installation issues with common R library path. (#129, @kelly-sovacool)<ul> <li>The <code>Rlib_dir</code> and <code>Rpkg_config</code> config options have been removed as they are no longer needed.</li> </ul> </li> </ul>"},{"location":"changelog/#new-features","title":"New features","text":"<ul> <li>New visualizations: (#132, @epehrsson)</li> <li>New rules <code>cov_correlation</code>, <code>homer_enrich</code>, <code>combine_homer</code>, <code>count_peaks</code></li> <li>Add peak caller to MACS2 peak xls filename</li> <li>New parameters in the config file to make certain rules optional: (#133, @kelly-sovacool)</li> <li>GO enrichment is controlled by <code>run_go_enrichment</code> (default: <code>false</code>)</li> <li>ROSE is controlled by <code>run_rose</code> (default: <code>false</code>)</li> <li>New <code>--singcache</code> argument to provide a singularity cache dir location. The singularity cache dir is automatically set inside <code>/data/$USER/</code> or <code>$WORKDIR/</code> if <code>--singcache</code> is not provided. (#143, @kelly-sovacool)</li> </ul>"},{"location":"changelog/#misc","title":"Misc","text":"<ul> <li>The singularity version is no longer specified, per request of the biowulf admins. (#139, @kelly-sovacool)</li> <li>Minor documentation updates. (#146, @kelly-sovacool)</li> </ul>"},{"location":"changelog/#carlisle-v250","title":"CARLISLE v2.5.0","text":"<ul> <li>Refactors R packages to a common source location (#118, @slsevilla)</li> <li>Adds a --force flag to allow for re-initialization of a workdir (#97, @slsevilla)</li> <li>Fixes error with testrun in DESEQ2 (#113, @slsevilla)</li> <li>Decreases the number of samples being run with testrun, essentially running tinytest as default and removing tinytest as an option (#115, @slsevilla)</li> <li>Reads version from VERSION file instead of github repo link (#96, #112, @slsevilla)</li> <li>Added a CHANGELOG (#116, @slsevilla)</li> <li>Fix: RNA report bug, caused by hard-coding of PC1-3, when only PC1-2 were generated (#104, @slsevilla)</li> <li>Minor documentation improvements. (#100, @kelly-sovacool)</li> <li>Fix: allow printing the version or help message even if singularity is not in the path. (#110, @kelly-sovacool)</li> </ul>"},{"location":"changelog/#carlisle-v241","title":"CARLISLE v2.4.1","text":"<ul> <li>Add GitHub Action to add issues/PRs to personal project boards by @kelly-sovacool in #95</li> <li>Create install script by @kelly-sovacool in #93</li> <li>feat: use summits bed for homer input; save temporary files; fix deseq2 bug by @slsevilla in #108</li> <li>docs: adding citation and DOI to pipeline by @slsevilla in #107</li> <li>Test a dryrun with GitHub Actions by @kelly-sovacool in #94</li> </ul>"},{"location":"changelog/#carlisle-v240","title":"CARLISLE v2.4.0","text":"<ul> <li>Feature- Merged Yue's fork, adding DEEPTOOLS by @slsevilla in #85</li> <li>Feature- Added tracking features from SPOOK by @slsevilla in #88</li> <li>Feature - Dev test run completed by @slsevilla in #89</li> <li>Bug - Fixed bugs related to Biowulf transition</li> </ul>"},{"location":"changelog/#carlisle-v210","title":"CARLISLE v2.1.0","text":"<ul> <li>enhancement</li> <li>update gopeaks resources</li> <li>change SEACR to run \"norm\" without spikein controls, \"non\" with spikein controls</li> <li>update docs for changes; provide extra troubleshooting guidance</li> <li>fix GoEnrich bug for failed plots</li> </ul>"},{"location":"changelog/#carlisle-v201","title":"CARLISLE v2.0.1","text":"<ul> <li>fix error when contrasts set to \"N\"</li> <li>adjust goenrich resources to be more efficient</li> </ul>"},{"location":"changelog/#carlisle-200","title":"CARLISLE 2.0.0","text":"<ul> <li>Add a MAPQ filter to samtools (rule align)</li> <li>Add GoPeaks MultiQC module</li> <li>Allow for library normalization to occur during first pass</li> <li>Add --broad-cutoff to MACS2 broad peak calling for MACS2</li> <li>Create a spike in QC report</li> <li>Reorganize file structure to help with qthreshold folder</li> <li>Update variable names of all peak caller</li> <li>Merge rules with input/output/wildcard congruency</li> <li>Convert the \"spiked\" variable to \"norm_method</li> <li>Add name of control used to MACS2 peaks</li> <li>Running extra control:sample comparisons that are not needed</li> <li>improved resource allocation</li> <li>test data originally included 1475 jobs, this version includes 1087 jobs (reduction of 25%) despite including additional features</li> <li>moved ~12% of all jobs to local deployment (within SLURM submission)</li> </ul>"},{"location":"changelog/#carlisle-120","title":"CARLISLE 1.2.0","text":"<ul> <li>merge increases to resources; update workflow img, contributions</li> </ul>"},{"location":"changelog/#carlisle-111","title":"CARLISLE 1.1.1","text":"<ul> <li>patch for gz bigbed bug</li> </ul>"},{"location":"changelog/#carlisle-110","title":"CARLISLE 1.1.0","text":"<ul> <li>add broad-cutoff to macs2 broad peaks param settings</li> <li>add non.stringent and non.relaxed to annotation options</li> <li>merge DESEQ and DESEQ2 rules together</li> <li>identify some files as temp</li> </ul>"},{"location":"changelog/#carlisle-101","title":"CARLISLE 1.0.1","text":"<ul> <li>contains patch for DESEQ error with non hs1 reference samples</li> </ul>"},{"location":"contributing/","title":"Contributing to CARLISLE","text":""},{"location":"contributing/#proposing-changes-with-issues","title":"Proposing changes with issues","text":"<p>If you want to make a change, it's a good idea to first open an issue and make sure someone from the team agrees that it\u2019s needed.</p> <p>If you've decided to work on an issue, assign yourself to the issue so others will know you're working on it.</p>"},{"location":"contributing/#pull-request-process","title":"Pull request process","text":"<p>We use GitHub Flow as our collaboration process. Follow the steps below for detailed instructions on contributing changes to CARLISLE.</p> <p></p>"},{"location":"contributing/#clone-the-repo","title":"Clone the repo","text":"<p>If you are a member of CCBR, you can clone this repository to your computer or development environment. Otherwise, you will first need to fork the repo and clone your fork. You only need to do this step once.</p> <pre><code>git clone https://github.com/CCBR/CARLISLE\n</code></pre> <p>Cloning into 'CARLISLE'...  remote: Enumerating objects: 1136, done.  remote: Counting objects: 100% (463/463), done.  remote: Compressing objects: 100% (357/357), done.  remote: Total 1136 (delta 149), reused 332 (delta 103), pack-reused 673  Receiving objects: 100% (1136/1136), 11.01 MiB | 9.76 MiB/s, done.  Resolving deltas: 100% (530/530), done. </p> <pre><code>cd CARLISLE\n</code></pre>"},{"location":"contributing/#if-this-is-your-first-time-cloning-the-repo-you-may-need-to-install-dependencies","title":"If this is your first time cloning the repo, you may need to install dependencies","text":"<ul> <li> <p>Install snakemake and singularity or docker if needed (biowulf already has these available as modules).</p> </li> <li> <p>Install the python dependencies with pip</p> </li> </ul> <pre><code>pip install .\n</code></pre> <p>If you're developing on biowulf, you can use our shared conda environment which already has these dependencies installed</p> <pre><code>. \"/data/CCBR_Pipeliner/db/PipeDB/Conda/etc/profile.d/conda.sh\"\nconda activate py311\n</code></pre> <ul> <li>Install <code>pre-commit</code> if you don't already   have it. Then from the repo's root directory, run</li> </ul> <pre><code>pre-commit install\n</code></pre> <p>This will install the repo's pre-commit hooks.   You'll only need to do this step the first time you clone the repo.</p>"},{"location":"contributing/#create-a-branch","title":"Create a branch","text":"<p>Create a Git branch for your pull request (PR). Give the branch a descriptive name for the changes you will make, such as <code>iss-10</code> if it is for a specific issue.</p> <pre><code># create a new branch and switch to it\ngit branch iss-10\ngit switch iss-10\n</code></pre> <p>Switched to a new branch 'iss-10'</p>"},{"location":"contributing/#make-your-changes","title":"Make your changes","text":"<p>Edit the code, write and run tests, and update the documentation as needed.</p>"},{"location":"contributing/#test","title":"test","text":"<p>Changes to the python package code will also need unit tests to demonstrate that the changes work as intended. We write unit tests with pytest and store them in the <code>tests/</code> subdirectory. Run the tests with <code>python -m pytest</code>.</p> <p>If you change the workflow, please run the workflow with the test profile and make sure your new feature or bug fix works as intended.</p>"},{"location":"contributing/#document","title":"document","text":"<p>If you have added a new feature or changed the API of an existing feature, you will likely need to update the documentation in <code>docs/</code>.</p>"},{"location":"contributing/#commit-and-push-your-changes","title":"Commit and push your changes","text":"<p>If you're not sure how often you should commit or what your commits should consist of, we recommend following the \"atomic commits\" principle where each commit contains one new feature, fix, or task. Learn more about atomic commits here: https://www.freshconsulting.com/insights/blog/atomic-commits/</p> <p>First, add the files that you changed to the staging area:</p> <pre><code>git add path/to/changed/files/\n</code></pre> <p>Then make the commit. Your commit message should follow the Conventional Commits specification. Briefly, each commit should start with one of the approved types such as <code>feat</code>, <code>fix</code>, <code>docs</code>, etc. followed by a description of the commit. Take a look at the Conventional Commits specification for more detailed information about how to write commit messages.</p> <pre><code>git commit -m 'feat: create function for awesome feature'\n</code></pre> <p>pre-commit will enforce that your commit message and the code changes are styled correctly and will attempt to make corrections if needed.</p> <p>Check for added large files..............................................Passed  Fix End of Files.........................................................Passed  Trim Trailing Whitespace.................................................Failed </p> <ul> <li>hook id: trailing-whitespace </li> <li>exit code: 1 </li> <li>files were modified by this hook  &gt;    Fixing path/to/changed/files/file.txt  &gt;    codespell................................................................Passed    style-files..........................................(no files to check)Skipped    readme-rmd-rendered..................................(no files to check)Skipped    use-tidy-description.................................(no files to check)Skipped </li> </ul> <p>In the example above, one of the hooks modified a file in the proposed commit, so the pre-commit check failed. You can run <code>git diff</code> to see the changes that pre-commit made and <code>git status</code> to see which files were modified. To proceed with the commit, re-add the modified file(s) and re-run the commit command:</p> <pre><code>git add path/to/changed/files/file.txt\ngit commit -m 'feat: create function for awesome feature'\n</code></pre> <p>This time, all the hooks either passed or were skipped (e.g. hooks that only run on R code will not run if no R files were committed). When the pre-commit check is successful, the usual commit success message will appear after the pre-commit messages showing that the commit was created.</p> <p>Check for added large files..............................................Passed  Fix End of Files.........................................................Passed  Trim Trailing Whitespace.................................................Passed  codespell................................................................Passed  style-files..........................................(no files to check)Skipped  readme-rmd-rendered..................................(no files to check)Skipped  use-tidy-description.................................(no files to check)Skipped  Conventional Commit......................................................Passed  &gt; [iss-10 9ff256e] feat: create function for awesome feature  1 file changed, 22 insertions(+), 3 deletions(-) </p> <p>Finally, push your changes to GitHub:</p> <pre><code>git push\n</code></pre> <p>If this is the first time you are pushing this branch, you may have to explicitly set the upstream branch:</p> <pre><code>git push --set-upstream origin iss-10\n</code></pre> <p>Enumerating objects: 7, done.  Counting objects: 100% (7/7), done.  Delta compression using up to 10 threads  Compressing objects: 100% (4/4), done.  Writing objects: 100% (4/4), 648 bytes | 648.00 KiB/s, done.  Total 4 (delta 3), reused 0 (delta 0), pack-reused 0  remote: Resolving deltas: 100% (3/3), completed with 3 local objects.  remote:  remote: Create a pull request for 'iss-10' on GitHub by visiting:  remote: https://github.com/CCBR/CARLISLE/pull/new/iss-10  remote:  To https://github.com/CCBR/CARLISLE  &gt;  &gt; [new branch] iss-10 -&gt; iss-10  branch 'iss-10' set up to track 'origin/iss-10'. </p> <p>We recommend pushing your commits often so they will be backed up on GitHub. You can view the files in your branch on GitHub at <code>https://github.com/CCBR/CARLISLE/tree/&lt;your-branch-name&gt;</code> (replace <code>&lt;your-branch-name&gt;</code> with the actual name of your branch).</p>"},{"location":"contributing/#create-the-pr","title":"Create the PR","text":"<p>Once your branch is ready, create a PR on GitHub: https://github.com/CCBR/CARLISLE/pull/new/</p> <p>Select the branch you just pushed:</p> <p></p> <p>Edit the PR title and description. The title should briefly describe the change. Follow the comments in the template to fill out the body of the PR, and you can delete the comments (everything between <code>&lt;!--</code> and <code>--&gt;</code>) as you go. Be sure to fill out the checklist, checking off items as you complete them or striking through any irrelevant items. When you're ready, click 'Create pull request' to open it.</p> <p></p> <p>Optionally, you can mark the PR as a draft if you're not yet ready for it to be reviewed, then change it later when you're ready.</p>"},{"location":"contributing/#wait-for-a-maintainer-to-review-your-pr","title":"Wait for a maintainer to review your PR","text":"<p>We will do our best to follow the tidyverse code review principles: https://code-review.tidyverse.org/. The reviewer may suggest that you make changes before accepting your PR in order to improve the code quality or style. If that's the case, continue to make changes in your branch and push them to GitHub, and they will appear in the PR.</p> <p>Once the PR is approved, the maintainer will merge it and the issue(s) the PR links will close automatically. Congratulations and thank you for your contribution!</p>"},{"location":"contributing/#after-your-pr-has-been-merged","title":"After your PR has been merged","text":"<p>After your PR has been merged, update your local clone of the repo by switching to the main branch and pulling the latest changes:</p> <pre><code>git checkout main\ngit pull\n</code></pre> <p>It's a good idea to run <code>git pull</code> before creating a new branch so it will start from the most recent commits in main.</p>"},{"location":"contributing/#helpful-links-for-more-information","title":"Helpful links for more information","text":"<ul> <li>GitHub Flow</li> <li>semantic versioning guidelines</li> <li>changelog guidelines</li> <li>tidyverse code review principles</li> <li>reproducible examples</li> <li>nf-core extensions for VS Code</li> </ul>"},{"location":"user-guide/contributions/","title":"Contributions","text":"<p>The following members contributed to the development of the CARLISLE pipeline:</p> <ul> <li>Samantha Sevilla</li> <li>Vishal Koparde</li> <li>Hsien-chao Chou</li> <li>Sohyoung Kim</li> <li>Yue Hu</li> <li>Vassiliki Saloura</li> </ul> <p>VK, SS, SK, HC contributed to the generating the source code and all members contributed to the main concepts and analysis.</p>"},{"location":"user-guide/getting-started/","title":"Overview","text":"<p>The CARLISLE github repository is stored locally, and will be used for project deployment. Multiple projects can be deployed from this one point simultaneously, without concern.</p>"},{"location":"user-guide/getting-started/#1-getting-started","title":"1. Getting Started","text":""},{"location":"user-guide/getting-started/#11-introduction","title":"1.1 Introduction","text":"<p>The CARLISLE Pipelie beings with raw FASTQ files and performs trimming followed by alignment using BOWTIE2. Data is then normalized through either the use of an user-species species (IE E.Coli) spike-in control or through the determined library size. Peaks are then called using MACS2, SEACR, and GoPEAKS with various options selected by the user. Peaks are then annotated, and summarized into reports. If designated, differential analysis is performed using DESEQ2. QC reports are also generated with each project using FASTQC and MULTIQC. Annotations are added using HOMER and ROSE. GSEA Enrichment analysis predictions are added using CHIPENRICH.</p> <p>The following are sub-commands used within CARLISLE:</p> <ul> <li>initialize: initalize the pipeline</li> <li>dryrun: predict the binding of peptides to any MHC molecule</li> <li>cluster: execute the pipeline on the Biowulf HPC</li> <li>local: execute a local, interactive, session</li> <li>git: execute GitHub actions</li> <li>unlock: unlock directory</li> <li>DAG: create DAG report</li> <li>report: create SNAKEMAKE report</li> <li>runtest: copies test manifests and files to WORKDIR</li> </ul>"},{"location":"user-guide/getting-started/#12-setup-dependencies","title":"1.2 Setup Dependencies","text":"<p>CARLISLE has several dependencies listed below. These dependencies can be installed by a sysadmin. All dependencies will be automatically loaded if running from Biowulf.</p> <ul> <li>bedtools: \"bedtools/2.30.0\"</li> <li>bedops: \"bedops/2.4.40\"</li> <li>bowtie2: \"bowtie/2-2.4.2\"</li> <li>cutadapt: \"cutadapt/1.18\"</li> <li>fastqc: \"fastqc/0.11.9\"</li> <li>fastq_screen: \"fastq_screen/0.15.2\"</li> <li>fastq_val: \"/data/CCBR_Pipeliner/iCLIP/bin/fastQValidator\"</li> <li>fastxtoolkit: \"fastxtoolkit/0.0.14\"</li> <li>gopeaks: \"github clone https://github.com/maxsonBraunLab/gopeaks\"</li> <li>macs2: \"macs/2.2.7.1\"</li> <li>multiqc: \"multiqc/1.9\"</li> <li>perl: \"perl/5.34.0\"</li> <li>picard: \"picard/2.26.9\"</li> <li>python37: \"python/3.7\"</li> <li>R: \"R/4.2.2\"</li> <li>rose: \"ROSE/1.3.1\"</li> <li>samtools: \"samtools/1.15\"</li> <li>seacr: \"seacr/1.4-beta.2\"</li> <li>ucsc: \"ucsc/407\"</li> </ul>"},{"location":"user-guide/getting-started/#13-login-to-the-cluster","title":"1.3 Login to the cluster","text":"<p>CARLISLE has been exclusively tested on Biowulf HPC. Login to the cluster's head node and move into the pipeline location.</p> <pre><code># ssh into cluster's head node\nssh -Y $USER@biowulf.nih.gov\n</code></pre>"},{"location":"user-guide/getting-started/#14-load-an-interactive-session","title":"1.4 Load an interactive session","text":"<p>An interactive session should be started before performing any of the pipeline sub-commands, even if the pipeline is to be executed on the cluster.</p> <pre><code># Grab an interactive node\nsinteractive --time=12:00:00 --mem=8gb  --cpus-per-task=4 --pty bash\n</code></pre>"},{"location":"user-guide/output/","title":"4. Expected Outputs","text":"<p>The following directories are created under the WORKDIR/results directory:</p> <ul> <li>alignment_stats: this directory include information on the alignment of each sample</li> <li>bam: this directory includes BAM files, statistics on samples, statistics on spike-in controls for each sample</li> <li>bedgraph: this directory includes BEDGRAPH files and statistic summaries for each sample</li> <li>bigwig: this directory includes the bigwig files for each sample</li> <li>peaks: this directory contains a sub-directory that relates to the quality threshold used.</li> <li>quality threshold<ul> <li>contrasts: this directory includes the contrasts for each line listed in the contrast manifest</li> <li>peak_caller: this directory includes all peak calls from each peak_caller (SEACR, MACS2, GOPEAKS) for each sample</li> <li>annotation<ul> <li>go_enrichment: this directory includes gene set enrichment pathway predictions when <code>run_go_enrichment</code> is set to <code>true</code> in the config file.</li> <li>homer: this directory includes the annotation output from HOMER</li> <li>rose: this directory includes the annotation output from ROSE when <code>run_rose</code> is set to <code>true</code> in the config file.</li> </ul> </li> </ul> </li> <li>qc: this directory includes MULTIQC reports and spike-in control reports (when applicable)</li> </ul> <pre><code>\u251c\u2500\u2500 alignment_stats\n\u251c\u2500\u2500 bam\n\u251c\u2500\u2500 bedgraph\n\u251c\u2500\u2500 bigwig\n\u251c\u2500\u2500 fragments\n\u251c\u2500\u2500 peaks\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 0.05\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 contrasts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 contrast_id1.dedup_status\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 contrast_id2.dedup_status\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 gopeaks\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 annotation\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 go_enrichment\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 contrast_id1.dedup_status.go_enrichment_tables\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 contrast_id2.dedup_status.go_enrichment_html_report\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 homer\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 replicate_id1_vs_control_id.dedup_status.gopeaks_broad.motifs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 homerResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 knownResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 replicate_id1_vs_control_id.dedup_status.gopeaks_narrow.motifs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 homerResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 knownResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 replicate_id2_vs_control_id.dedup_status.gopeaks_broad.motifs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 homerResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 knownResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 replicate_id2_vs_control_id.dedup_status.gopeaks_narrow.motifs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 homerResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 knownResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 rose\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 replicate_id1_vs_control_id.dedup_status.gopeaks_broad.12500\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 replicate_id1_vs_control_id.dedup_status.gopeaks_narrow.12500\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 replicate_id2_vs_control_id.dedup_status.dedup.gopeaks_broad.12500\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 replicate_id2_vs_control_id.dedup_status.dedup.gopeaks_narrow.12500\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 peak_output\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 macs2\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 annotation\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 go_enrichment\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 contrast_id1.dedup_status.go_enrichment_tables\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 contrast_id2.dedup_status.go_enrichment_html_report\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 homer\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 replicate_id1_vs_control_id.dedup_status.macs2_narrow.motifs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 homerResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 knownResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 replicate_id1_vs_control_id.dedup_status.macs2_broad.motifs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 homerResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 knownResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 replicate_id2_vs_control_id.dedup_status.macs2_narrow.motifs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 homerResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 knownResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 replicate_id2_vs_control_id.dedup_status.macs2_broad.motifs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 homerResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 knownResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 rose\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 replicate_id1_vs_control_id.dedup_status.macs2_broad.12500\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 replicate_id1_vs_control_id.dedup_status.macs2_narrow.12500\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 replicate_id2_vs_control_id.dedup_status.macs2_broad.12500\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 replicate_id2_vs_control_id.dedup_status.macs2_narrow.12500\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 peak_output\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 seacr\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 annotation\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 go_enrichment\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 contrast_id1.dedup_status.go_enrichment_tables\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 contrast_id2.dedup_status.go_enrichment_html_report\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 homer\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 replicate_id1_vs_control_id.dedup_status.seacr_non_relaxed.motifs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 homerResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 knownResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 replicate_id1_vs_control_id.dedup_status.seacr_non_stringent.motifs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 homerResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 knownResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 replicate_id1_vs_control_id.dedup_status.seacr_norm_relaxed.motifs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 homerResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 knownResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 replicate_id1_vs_control_id.dedup_status.seacr_norm_stringent.motifs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 homerResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 knownResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 replicate_id2_vs_control_id.dedup_status.seacr_non_relaxed.motifs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 homerResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 knownResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 replicate_id2_vs_control_id.dedup_status.seacr_non_stringent.motifs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 homerResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 knownResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 replicate_id2_vs_control_id.dedup_status.seacr_norm_relaxed.motifs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 homerResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 knownResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 replicate_id2_vs_control_id.dedup_status.seacr_norm_stringent.motifs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 homerResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 knownResults\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 rose\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 replicate_id1_vs_control_id.dedup_status.seacr_non_relaxed.12500\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 replicate_id1_vs_control_id.dedup_status.seacr_non_stringent.12500\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 replicate_id1_vs_control_id.dedup_status.seacr_norm_relaxed.12500\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 replicate_id1_vs_control_id.dedup_status.seacr_norm_stringent.12500\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 replicate_id2_vs_control_id.dedup_status.seacr_non_relaxed.12500\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 replicate_id2_vs_control_id.dedup_status.seacr_non_stringent.12500\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 replicate_id2_vs_control_id.dedup_status.seacr_norm_relaxed.12500\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 replicate_id2_vs_control_id.dedup_status.seacr_norm_stringent.12500\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 peak_output\n\u2514\u2500\u2500 qc\n    \u251c\u2500\u2500 fastqc_raw\n    \u2514\u2500\u2500 fqscreen_raw\n</code></pre>"},{"location":"user-guide/preparing-files/","title":"2. Preparing Files","text":"<p>The pipeline is controlled through editing configuration and manifest files. Defaults are found in the /WORKDIR/config and /WORKDIR/manifest directories, after initialization.</p>"},{"location":"user-guide/preparing-files/#21-configs","title":"2.1 Configs","text":"<p>The configuration files control parameters and software of the pipeline. These files are listed below:</p> <ul> <li>config/config.yaml</li> <li>resources/cluster.yaml</li> <li>resources/tools.yaml</li> </ul>"},{"location":"user-guide/preparing-files/#211-cluster-config","title":"2.1.1 Cluster Config","text":"<p>The cluster configuration file dictates the resouces to be used during submission to Biowulf HPC. There are two differnt ways to control these parameters - first, to control the default settings, and second, to create or edit individual rules. These parameters should be edited with caution, after significant testing.</p>"},{"location":"user-guide/preparing-files/#212-tools-config","title":"2.1.2 Tools Config","text":"<p>The tools configuration file dictates the version of each software or program that is being used in the pipeline.</p>"},{"location":"user-guide/preparing-files/#213-config-yaml","title":"2.1.3 Config YAML","text":"<p>There are several groups of parameters that are editable for the user to control the various aspects of the pipeline. These are :</p> <ul> <li>Folders and Paths</li> <li>These parameters will include the input and ouput files of the pipeline, as well as list all manifest names.</li> <li>User parameters</li> <li>These parameters will control the pipeline features. These include thresholds and whether to perform processes.</li> <li>References</li> <li>These parameters will control the location of index files, spike-in references, adaptors and species calling information.</li> </ul>"},{"location":"user-guide/preparing-files/#2131-user-parameters","title":"2.1.3.1 User Parameters","text":""},{"location":"user-guide/preparing-files/#21311-spike-in-controls","title":"2.1.3.1.1 (Spike in Controls)","text":"<p>The pipeline allows for the use of a species specific spike-in control, or the use of normalization via library size. The parameter <code>spikein_genome</code> should be set to the species term used in <code>spikein_reference</code>.</p> <p>For example for ecoli spike-in:</p> <pre><code>run_contrasts: true\nnorm_method: \"spikein\"\nspikein_genome: \"ecoli\"\nspikein_reference:\n  ecoli:\n    fa: \"PIPELINE_HOME/resources/spikein/Ecoli_GCF_000005845.2_ASM584v2_genomic.fna\"\n</code></pre> <p>For example for drosophila spike-in:</p> <pre><code>run_contrasts: true\nnorm_method: \"spikein\"\nspikein_genome: \"drosophila\"\nspikein_reference:\n  drosophila:\n    fa: \"/fdb/igenomes/Drosophila_melanogaster/UCSC/dm6/Sequence/WholeGenomeFasta/genome.fa\"\n</code></pre> <p>If it's determined that the amount of spike-in is not sufficient for the run, a library normaliaztion can be performed.</p> <ol> <li>Complete a CARLISLE run with spike-in set to \"Y\". This will allow for the complete assessment of the spike-in.</li> <li>Run inital QC analysis on the output data</li> <li>Add the alignment_stats dir to the configuration file.</li> <li>Re-run the CARLISLE pipeline</li> </ol>"},{"location":"user-guide/preparing-files/#21312-duplication-status","title":"2.1.3.1.2 Duplication Status","text":"<p>Users can select duplicated peaks (dedup) or non-deduplicated peaks (no_dedup) through the user parameter.</p> <pre><code>dupstatus: \"dedup, no_dedup\"\n</code></pre>"},{"location":"user-guide/preparing-files/#21313-peak-caller","title":"2.1.3.1.3 Peak Caller","text":"<p>Three peak callers are available for deployment within the pipeline, with different settings deployed for each caller.</p> <ol> <li>MACS2 is available with two peak calling options: narrowPeak or broadPeak. NOTE: DESeq step generally fails for broadPeak; generally has too many calls.</li> </ol> <pre><code>peaktype: \"macs2_narrow, macs2_broad,\"\n</code></pre> <ol> <li>SEACR is available with four peak calling options: stringent or relaxed parameters, to be paired with \"norm\" for samples without a spike-in control and \"non\" for samples with a spikein control</li> </ol> <pre><code>peaktype: \"seacr_stringent, seacr_relaxed\"\n</code></pre> <ol> <li>GOPEAKS is available with two peak calling options: narrowpeaks or broadpeaks</li> </ol> <pre><code>peaktype: \"gopeaks_narrow, gopeaks_broad\"\n</code></pre> <p>A complete list of the available peak calling parameters and the recommended list of parameters is provided below:</p> Peak Caller Narrow Broad Normalized, Stringent Normalized, Relaxed Non-Normalized, Stringent Non-Normalized, Relaxed Macs2 AVAIL AVAIL NA NA NA NA SEACR NA NA AVAIL w/o SPIKEIN AVAIL w/o SPIKEIN AVAIL w/ SPIKEIN AVAIL w/ SPIKEIN GoPeaks AVAIL AVAIL NA NA NA NA <pre><code># Recommended list\n### peaktype: \"macs2_narrow, macs2_broad, gopeaks_narrow, gopeaks_broad\"\n\n# Available list\n### peaktype: \"macs2_narrow, macs2_broad, seacr_norm_stringent, seacr_norm_relaxed, seacr_non_stringent, seacr_non_relaxed, gopeaks_narrow, gopeaks_broad\"\n</code></pre>"},{"location":"user-guide/preparing-files/#213131-macs2-additional-option","title":"2.1.3.1.3.1 Macs2 additional option","text":"<p>MACS2 can be run with or without the control. adding a control will increase peak specificity Selecting \"Y\" for the <code>macs2_control</code> will run the paired control sample provided in the sample manifest</p>"},{"location":"user-guide/preparing-files/#21314-quality-tresholds","title":"2.1.3.1.4 Quality Tresholds","text":"<p>Thresholds for quality can be controled through the <code>quality_tresholds</code> parameter. This must be a list of comma separated values. minimum of numeric value required.</p> <ul> <li>default MACS2 qvalue is 0.05 https://manpages.ubuntu.com/manpages/xenial/man1/macs2_callpeak.1.html</li> <li>default GOPEAKS pvalue is 0.05 https://github.com/maxsonBraunLab/gopeaks/blob/main/README.md</li> <li>default SEACR FDR threshold 1 https://github.com/FredHutch/SEACR/blob/master/README.md</li> </ul> <pre><code>#default values\nquality_thresholds: \"0.1, 0.05, 0.01\"\n</code></pre>"},{"location":"user-guide/preparing-files/#2132-references","title":"2.1.3.2 References","text":"<p>Additional reference files may be added to the pipeline, if other species were to be used.</p> <p>The absolute file paths which must be included are:</p> <ol> <li>fa: \"/path/to/species.fa\"</li> <li>blacklist: \"/path/to/blacklistbed/species.bed\"</li> </ol> <p>The following information must be included:</p> <ol> <li>regions: \"list of regions to be included; IE chr1 chr2 chr3\"</li> <li>macs2_g: \"macs2 genome shorthand; IE mm IE hs\"</li> </ol>"},{"location":"user-guide/preparing-files/#22-preparing-manifests","title":"2.2 Preparing Manifests","text":"<p>There are two manifests, one which required for all pipeliens and one that is only required if running a differential analysis. These files describe information on the samples and desired contrasts. The paths of these files are defined in the snakemake_config.yaml file. These files are:</p> <ul> <li>samplemanifest</li> <li>contrasts</li> </ul>"},{"location":"user-guide/preparing-files/#221-samples-manifest-required","title":"2.2.1 Samples Manifest (REQUIRED)","text":"<p>This manifest will include information to sample level information. It includes the following column headers:</p> <ul> <li>sampleName: the sample name WITHOUT replicate number (IE \"SAMPLE\")</li> <li>replicateNumber: the sample replicate number (IE \"1\")</li> <li>isControl: whether the sample should be identified as a control (IE \"Y\")</li> <li>controlName: the name of the control to use for this sample (IE \"CONTROL\")</li> <li>controlReplicateNumber: the replicate number of the control to use for this sample (IE \"1\")</li> <li>path_to_R1: the full path to R1 fastq file (IE \"/path/to/sample1.R1.fastq\")</li> <li>path_to_R2: the full path to R1 fastq file (IE \"/path/to/sample2.R2.fastq\")</li> </ul> <p>An example sampleManifest file is shown below:</p> sampleName replicateNumber isControl controlName controlReplicateNumber path_to_R1 path_to_R2 53_H3K4me3 1 N HN6_IgG_rabbit_negative_control 1 PIPELINE_HOME/.test/53_H3K4me3_1.R1.fastq.gz PIPELINE_HOME/.test/53_H3K4me3_1.R2.fastq.gz 53_H3K4me3 2 N HN6_IgG_rabbit_negative_control 1 PIPELINE_HOME/.test/53_H3K4me3_2.R1.fastq.gz PIPELINE_HOME/.test/53_H3K4me3_2.R2.fastq.gz HN6_H3K4me3 1 N HN6_IgG_rabbit_negative_control 1 PIPELINE_HOME/.test/HN6_H3K4me3_1.R1.fastq.gz PIPELINE_HOME/.test/HN6_H3K4me3_1.R2.fastq.gz HN6_H3K4me3 2 N HN6_IgG_rabbit_negative_control 1 PIPELINE_HOME/.test/HN6_H3K4me3_2.R1.fastq.gz PIPELINE_HOME/.test/HN6_H3K4me3_2.R2.fastq.gz HN6_IgG_rabbit_negative_control 1 Y - - PIPELINE_HOME/.test/HN6_IgG_rabbit_negative_control_1.R1.fastq.gz PIPELINE_HOME/.test/HN6_IgG_rabbit_negative_control_1.R2.fastq.gz"},{"location":"user-guide/preparing-files/#222-contrast-manifest-optional","title":"2.2.2 Contrast Manifest (OPTIONAL)","text":"<p>This manifest will include sample information to performed differential comparisons.</p> <p>An example contrast file:</p> condition1 condition2 MOC1_siSmyd3_2m_25_HCHO MOC1_siNC_2m_25_HCHO <p>Note: you must have more than one sample per condition in order to perform differential analysis with DESeq2</p>"},{"location":"user-guide/run/","title":"3. Running the Pipeline","text":""},{"location":"user-guide/run/#31-pipeline-overview","title":"3.1 Pipeline Overview","text":"<p>The Snakemake workflow has a multiple options</p>"},{"location":"user-guide/run/#required-arguments","title":"Required arguments","text":"<pre><code>Usage: bash ./data/CCBR_Pipeliner/Pipelines/CARLISLE/carlisle -m/--runmode=&lt;RUNMODE&gt; -w/--workdir=&lt;WORKDIR&gt;\n\n1.  RUNMODE: [Type: String] Valid options:\n    *) init : initialize workdir\n    *) run : run with slurm\n    *) reset : DELETE workdir dir and re-init it\n    *) dryrun : dry run snakemake to generate DAG\n    *) unlock : unlock workdir if locked by snakemake\n    *) runlocal : run without submitting to sbatch\n    *) runtest: run on cluster with included test dataset\n2.  WORKDIR: [Type: String]: Absolute or relative path to the output folder with write permissions.\n</code></pre>"},{"location":"user-guide/run/#optional-arguments","title":"Optional arguments","text":"<p>--help|-h       : print this help. --version|-v    : print the version of carlisle. --force|-f      : use the force flag for snakemake to force all rules to run. --singcache|-c  : singularity cache directory. Default is <code>/data/${USER}/.singularity</code> if available, or falls back to <code>${WORKDIR}/.singularity</code>. Use this flag to specify a different singularity cache directory.</p>"},{"location":"user-guide/run/#32-commands-explained","title":"3.2 Commands explained","text":"<p>The following explains each of the command options:</p> <ul> <li>Preparation Commands</li> <li>init (REQUIRED): This must be performed before any Snakemake run (dry, local, cluster) can be performed. This will copy the necessary config, manifest and Snakefiles needed to run the pipeline to the provided output directory.<ul> <li>the -f/--force flag can be used in order to re-initialize a workdir that has already been created</li> </ul> </li> <li>dryrun (OPTIONAL): This is an optional step, to be performed before any Snakemake run (local, cluster). This will check for errors within the pipeline, and ensure that you have read/write access to the files needed to run the full pipeline.</li> <li>Processing Commands</li> <li>local: This will run the pipeline on a local node. NOTE: This should only be performed on an interactive node.</li> <li>run: This will submit a master job to the cluster, and subsequent sub-jobs as needed to complete the workflow. An email will be sent when the pipeline begins, if there are any errors, and when it completes.</li> <li>Other Commands (All optional)</li> <li>unlock: This will unlock the pipeline if an error caused it to stop in the middle of a run.</li> <li>runtest: This will run a test of the pipeline with test data</li> </ul> <p>To run any of these commands, follow the the syntax:</p> <pre><code>bash ./data/CCBR_Pipeliner/Pipelines/CARLISLE/carlisle --runmode=COMMAND --workdir=/path/to/output/dir\n</code></pre>"},{"location":"user-guide/run/#33-typical-workflow","title":"3.3 Typical Workflow","text":"<p>A typical command workflow, running on the cluser, is as follows:</p> <pre><code>bash ./data/CCBR_Pipeliner/Pipelines/CARLISLE/carlisle --runmode=init --workdir=/path/to/output/dir\n\nbash ./data/CCBR_Pipeliner/Pipelines/CARLISLE/carlisle --runmode=dryrun --workdir=/path/to/output/dir\n\nbash ./data/CCBR_Pipeliner/Pipelines/CARLISLE/carlisle --runmode=run --workdir=/path/to/output/dir\n</code></pre>"},{"location":"user-guide/test-info/","title":"5. Pipeline Tutorial","text":"<p>Welcome to the CARLISLE Pipeline Tutorial!</p>"},{"location":"user-guide/test-info/#51-getting-started","title":"5.1 Getting Started","text":"<p>Review the information on the Getting Started for a complete overview the pipeline. The tutorial below will use test data available on NIH Biowulf HPC only. All example code will assume you are running v1.0 of the pipeline, using test data available on GitHub.</p> <p>A. Change working directory to the CARLISLE repository</p> <p>B. Initialize Pipeline</p> <pre><code>bash ./path/to/dir/carlisle --runmode=init --workdir=/path/to/output/dir\n</code></pre>"},{"location":"user-guide/test-info/#52-submit-the-test-data","title":"5.2 Submit the test data","text":"<p>Test data is included in the .test directory as well as the config directory.</p> <p>A Run the test command to prepare the data, perform a dry-run and submit to the cluster</p> <pre><code>bash ./path/to/dir/carlisle --runmode=runtest --workdir=/path/to/output/dir\n</code></pre> <ul> <li>An expected output for the <code>runtest</code> is as follows:</li> </ul> <pre><code>Job stats:\njob                              count    min threads    max threads\n-----------------------------  -------  -------------  -------------\nDESeq                                  24              1              1\nalign                                   9             56             56\nalignstats                              9              2              2\nall                                     1              1              1\nbam2bg                                  9              4              4\ncreate_contrast_data_files             24              1              1\ncreate_contrast_peakcaller_files       12              1              1\ncreate_reference                        1             32             32\ncreate_replicate_sample_table           1              1              1\ndiffbb                                 24              1              1\nfilter                                 18              2              2\nfindMotif                              96              6              6\ngather_alignstats                       1              1              1\ngo_enrichment                          12              1              1\ngopeaks_broad                          16              2              2\ngopeaks_narrow                         16              2              2\nmacs2_broad                            16              2              2\nmacs2_narrow                           16              2              2\nmake_counts_matrix                     24              1              1\nmultiqc                                 2              1              1\nqc_fastqc                               9              1              1\nrose                                   96              2              2\nseacr_relaxed                          16              2              2\nseacr_stringent                        16              2              2\nspikein_assessment                      1              1              1\ntrim                                    9             56             56\ntotal                                 478              1             56\n</code></pre>"},{"location":"user-guide/test-info/#53-review-outputs","title":"5.3 Review outputs","text":"<p>Review the expected outputs on the Output page. If there are errors, review and performing stesp described on the Troubleshooting page as needed.</p>"},{"location":"user-guide/troubleshooting/","title":"Troubleshooting","text":"<p>Recommended steps to troubleshoot the pipeline.</p>"},{"location":"user-guide/troubleshooting/#11-email","title":"1.1 Email","text":"<p>Check your email for an email regarding pipeline failure. You will receive an email from slurm@biowulf.nih.gov with the subject: Slurm Job_id=[#] Name=CARLISLE Failed, Run time [time], FAILED, ExitCode 1</p>"},{"location":"user-guide/troubleshooting/#12-review-the-log-files","title":"1.2 Review the log files","text":"<p>Review the logs in two ways:</p> <ol> <li>Review the master slurm file: This file will be found in the <code>/path/to/results/dir/</code> and titled <code>slurm-[jobid].out</code>. Reviewing this file will tell you what rule errored, and for any local SLURM jobs, provide error details</li> <li>Review the individual rule log files: After reviewing the master slurm-file, review the specific rules that failed within the <code>/path/to/results/dir/logs/</code>. Each rule will include a <code>.err</code> and <code>.out</code> file, with the following formatting: <code>{rulename}.{masterjobID}.{individualruleID}.{wildcards from the rule}.{out or err}</code></li> </ol>"},{"location":"user-guide/troubleshooting/#13-restart-the-run","title":"1.3 Restart the run","text":"<p>After addressing the issue, unlock the output directory, perform another dry-run and check the status of the pipeline, then resubmit to the cluster.</p> <pre><code>#unlock dir\nbash ./data/CCBR_Pipeliner/Pipelines/CARLISLE/carlisle --runmode=unlock --workdir=/path/to/output/dir\n\n#perform dry-run\nbash ./data/CCBR_Pipeliner/Pipelines/CARLISLE/carlisle --runmode=dryrun --workdir=/path/to/output/dir\n\n#submit to cluster\nbash ./data/CCBR_Pipeliner/Pipelines/CARLISLE/carlisle --runmode=run --workdir=/path/to/output/dir\n</code></pre>"},{"location":"user-guide/troubleshooting/#14-contact-information","title":"1.4 Contact information","text":"<p>If after troubleshooting, the error cannot be resolved, or if a bug is found, please create an issue and send and email to Samantha Chill.</p>"}]}