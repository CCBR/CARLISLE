from os.path import join

def run_macs2(wildcards):
    files=[]
    if "narrowPeak" in config["peaktype"]:
        n=expand(join(RESULTSDIR,"peaks","macs2","{replicate}","{replicate}.{dupstatus}_peaks.narrowPeak"),replicate=REPLICATES,dupstatus=DUPSTATUS),
        files.extend(n)
        n2=expand(join(RESULTSDIR,"peaks","macs2","{replicate}","{replicate}.{dupstatus}_peaks.narrow.bigbed"),replicate=REPLICATES,dupstatus=DUPSTATUS),
        files.extend(n2)        
    if "broadPeak" in config["peaktype"]:
        b=expand(join(RESULTSDIR,"peaks","macs2","{replicate}","{replicate}.{dupstatus}_peaks.broadPeak"),replicate=REPLICATES,dupstatus=DUPSTATUS),
        files.extend(b)
        b2=expand(join(RESULTSDIR,"peaks","macs2","{replicate}","{replicate}.{dupstatus}_peaks.broad.bigbed"),replicate=REPLICATES,dupstatus=DUPSTATUS),
        files.extend(b2)
    return files

def run_seacr(wildcards):
    files=[]
    if "norm.stringent.bed" in config["peaktype"]:
        s=expand([join(RESULTSDIR,"peaks","seacr","{treatment}_vs_{control}","{treatment}_vs_{control}.{dupstatus}.norm.stringent.bed")],zip,treatment=TREATMENTS,control=CONTROLS,dupstatus=DUPSTATUS),
        files.extend(s)
        s2=expand([join(RESULTSDIR,"peaks","seacr","{treatment}_vs_{control}","{treatment}_vs_{control}.{dupstatus}.norm.stringent.bigbed")],zip,treatment=TREATMENTS,control=CONTROLS,dupstatus=DUPSTATUS),
        files.extend(s2)
        s3=expand([join(RESULTSDIR,"peaks","seacr","{treatment}_vs_{control}","{treatment}_vs_{control}.{dupstatus}.non.stringent.bigbed")],zip,treatment=TREATMENTS,control=CONTROLS,dupstatus=DUPSTATUS),
        files.extend(s3)
    if "norm.relaxed.bed" in config["peaktype"]:
        r=expand([join(RESULTSDIR,"peaks","seacr","{treatment}_vs_{control}","{treatment}_vs_{control}.{dupstatus}.norm.relaxed.bed")],zip,treatment=TREATMENTS,control=CONTROLS,dupstatus=DUPSTATUS),
        files.extend(r)
        r2=expand([join(RESULTSDIR,"peaks","seacr","{treatment}_vs_{control}","{treatment}_vs_{control}.{dupstatus}.norm.relaxed.bigbed")],zip,treatment=TREATMENTS,control=CONTROLS,dupstatus=DUPSTATUS),
        files.extend(r2)
        r3=expand([join(RESULTSDIR,"peaks","seacr","{treatment}_vs_{control}","{treatment}_vs_{control}.{dupstatus}.non.relaxed.bigbed")],zip,treatment=TREATMENTS,control=CONTROLS,dupstatus=DUPSTATUS),
        files.extend(r3)
    return files

def run_gopeaks(wildcards):
    files=[]
    if "narrowGo_peaks.bed" in config["peaktype"]:
        n=expand([join(RESULTSDIR,"peaks","gopeaks","{treatment}_vs_{control}.dedup.narrowGo_peaks.bed")],zip,treatment=TREATMENTS,control=CONTROLS),
        files.extend(n)
        n2=expand([join(RESULTSDIR,"peaks","gopeaks","{treatment}_vs_{control}.dedup.narrowGo_peaks.bigbed")],zip,treatment=TREATMENTS,control=CONTROLS),
        files.extend(n2)
    if "broadGo_peaks.bed" in config["peaktype"]:
        b=expand([join(RESULTSDIR,"peaks","gopeaks","{treatment}_vs_{control}.dedup.broadGo_peaks.bed")],zip,treatment=TREATMENTS,control=CONTROLS),
        files.extend(b)
        b2=expand([join(RESULTSDIR,"peaks","gopeaks","{treatment}_vs_{control}.dedup.broadGo_peaks.bigbed")],zip,treatment=TREATMENTS,control=CONTROLS),
        files.extend(b2)
    return files

def run_contrasts(wildcards):
    files=[]
    if config["run_contrasts"] == "Y":
        files.append(join(RESULTSDIR,"replicate_sample.tsv"))
        files.append(join(RESULTSDIR,"peaks","contrasts","bed_bedgraph_paths.tsv"))
        inputs=expand([join(RESULTSDIR,"peaks","contrasts","{c1}_vs_{c2}__{ds}__{pt}","{c1}_vs_{c2}__{ds}__{pt}_inputs.txt")],zip,c1=C1s,c2=C2s,ds=DS,pt=PT)
        files.extend(inputs)
        cms=expand([join(RESULTSDIR,"peaks","contrasts","{c1}_vs_{c2}__{ds}__{pt}","{c1}_vs_{c2}__{ds}__{pt}_countsmatrix.txt")],zip,c1=C1s,c2=C2s,ds=DS,pt=PT)
        files.extend(cms)
        fcms=expand([join(RESULTSDIR,"peaks","contrasts","{c1}_vs_{c2}__{ds}__{pt}","{c1}_vs_{c2}__{ds}__{pt}_fragmentscountsmatrix.txt")],zip,c1=C1s,c2=C2s,ds=DS,pt=PT)
        files.extend(fcms)
        results=expand([join(RESULTSDIR,"peaks","contrasts","{c1}_vs_{c2}__{ds}__{pt}","{c1}_vs_{c2}__{ds}__{pt}_AUCbased_diffresults.txt")],zip,c1=C1s,c2=C2s,ds=DS,pt=PT)
        files.extend(results)
        htmls=expand([join(RESULTSDIR,"peaks","contrasts","{c1}_vs_{c2}__{ds}__{pt}","{c1}_vs_{c2}__{ds}__{pt}_AUCbased_diffanalysis.html")],zip,c1=C1s,c2=C2s,ds=DS,pt=PT)
        files.extend(htmls)
        bbs=expand([join(RESULTSDIR,"peaks","contrasts","{c1}_vs_{c2}__{ds}__{pt}","{c1}_vs_{c2}__{ds}__{pt}_AUCbased_diffresults.bigbed")],zip,c1=C1s,c2=C2s,ds=DS,pt=PT)
        files.extend(bbs)
        fresults=expand([join(RESULTSDIR,"peaks","contrasts","{c1}_vs_{c2}__{ds}__{pt}","{c1}_vs_{c2}__{ds}__{pt}_fragmentsbased_diffresults.txt")],zip,c1=C1s,c2=C2s,ds=DS,pt=PT)
        files.extend(fresults)
        fhtmls=expand([join(RESULTSDIR,"peaks","contrasts","{c1}_vs_{c2}__{ds}__{pt}","{c1}_vs_{c2}__{ds}__{pt}_fragmentsbased_diffanalysis.html")],zip,c1=C1s,c2=C2s,ds=DS,pt=PT)
        files.extend(fhtmls)
        fbbs=expand([join(RESULTSDIR,"peaks","contrasts","{c1}_vs_{c2}__{ds}__{pt}","{c1}_vs_{c2}__{ds}__{pt}_fragmentsbased_diffresults.bigbed")],zip,c1=C1s,c2=C2s,ds=DS,pt=PT)
        files.extend(fbbs)
        venns=expand([join(RESULTSDIR,"peaks","contrasts","{c1}_vs_{c2}__{ds}__{pt}","{c1}_vs_{c2}__{ds}__{pt}_venn.pdf")],zip,c1=C1s,c2=C2s,ds=DS,pt=PT)
        files.extend(venns)
    return files

def get_annotation_macs2(wildcards):
    files=[]
    if "narrowPeak" in config["peaktype"] or "broadPeak" in config["peaktype"]:
        f=expand(join(RESULTSDIR,"annotation","{macs_types}","{replicate}.{dupstatus}_peaks.annotation.txt"),macs_types=MACS_TYPES,replicate=REPLICATES,dupstatus=DUPSTATUS),
        files.extend(f)
    return files

def get_annotation_s_and_g(wildcards):
    files=[]
    if "narrowGo_peaks.bed" in config["peaktype"] or "broadGo_peaks.bed" in config["peaktype"] or "norm.stringent.bed" in config["peaktype"] or "norm.relaxed.bed" in config["peaktype"]:
        f=expand(join(RESULTSDIR,"annotation","{s_and_g_types}","{t_and_c}.{dupstatus}_peaks.annotation.txt"),s_and_g_types=S_AND_G_TYPES,t_and_c=TREATMENT_CONTROL_LIST,dupstatus=DUPSTATUS),
        files.extend(f)
    return files


include: "rules/init.smk"
include: "rules/align.smk"
include: "rules/peakcalls.smk"
include: "rules/diff.smk"
#include: "rules/annotations.smk"

rule all:
    input:
        ##########################################
        ### required files
        ##########################################
        ## PEAKCALLS rules
        unpack(run_macs2),
        unpack(run_seacr),
        unpack(run_gopeaks),
        unpack(run_contrasts),

        ## ANNOTATION
        #unpack(get_annotation_macs2),
        #unpack(get_annotation_s_and_g),

        ##########################################
        ### intermediate files
        ##########################################
        # bowtie2 index building
        # join(BOWTIE2_INDEX,"ref.1.bt2"),
        # join(BOWTIE2_INDEX,"ref.len"),
        # join(BOWTIE2_INDEX,"spikein.len"),

        ## ALIGN RULES
        # filtered bams
        # expand(join(RESULTSDIR,"bam","{replicate}.{dupstatus}.bam"),replicate=REPLICATES,dupstatus=DUPSTATUS),
        # expand(join(RESULTSDIR,"bam","{replicate}.{dupstatus}.bam.idxstats"),replicate=REPLICATES,dupstatus=DUPSTATUS),
        
        # # alignment stats yaml files and stats table
        # expand(join(RESULTSDIR,"alignment_stats","{replicate}.alignment_stats.yaml"),replicate=REPLICATES),
        # join(RESULTSDIR,"alignment_stats","alignment_stats.tsv"),
        
        # # bedgraphs and bigwigs
        # expand(join(RESULTSDIR,"fragments","{replicate}.{dupstatus}.fragments.bed"),replicate=REPLICATES,dupstatus=DUPSTATUS),
        # expand(join(RESULTSDIR,"bedgraph","{replicate}.{dupstatus}.bedgraph"),replicate=REPLICATES,dupstatus=DUPSTATUS),
        # expand(join(RESULTSDIR,"bigwig","{replicate}.{dupstatus}.bigwig"),replicate=REPLICATES,dupstatus=DUPSTATUS),
